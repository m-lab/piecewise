#######
# PIECEWISE SYSTEM CONFIGURATION
#######

# Certain tasks may operate in a less secure (but more convenient) manner, eg.
# enabling passwordless sudo or generating self-signed ssl certs, when testing
# locally, in Vagrant. But not in production!
#
# Supported values: production, development
env: development

# What Linux distro is being used? Supported options include: debian8, rhel7
sys: debian8

# The project name should be the name of your forked repository.
# This var is referenced by a few other vars, eg. git_repo, hostname, site_fqdn.
project_name: piecewise

# Information about the fork and branch to deploy.
# Specify any valid git remote (typically a github username)
remote: https://github.com/critzo

# Specify any ref (eg. branch, tag, SHA) to be deployed. This ref must be
# pushed to the remote git_repo before it can be deployed.
piecewise_commit: ansible-refactor98-2

git_repo: "{{ remote }}/{{ project_name }}.git"

# BigQuery Project Number to use
bigquery_project_num: 819467010820

# Your Postgres database name and user can be customized if necessary.  
database_name: piecewise
database_user: postgres
database_user_group: postgres

# This is the fully qualified domain name of your production server. Because
# nginx checks this value against the URL being requested, it must be the same
# as the server's DNS name. 
site_fqdn: "piecewise.opentechinstitute.org"

# The variables below will be used to generate SSL certificates. When deploying to 
# development hosts, the country, state and city are used by open SSL to generate a 
# self-signed certificate. This is useful when you don't have an DNS name set up yet 
# and want to deploy using the host's IP address, or to a server not accessible to 
# the Internet. 
#
# When deploying to a production host. The site_contact and the site_fqdn variables are 
# used by EFF's certbot tool to automate the request for valid SSL certificates from 
# the LetsEncrypt CA.
site_contact: critzo@opentechinstitute.org
site_country: US
site_state: District of Columbia
site_city: Washington
site_ou: OTI

# Path for self-signed certificates to be used in development deployments
self_signed_ssl_cert_path: /etc/ssl/selfsigned.{{ site_fqdn }}.cert
self_signed_ssl_key_path: /etc/ssl/selfsigned.{{ site_fqdn }}.key

# If we're deploying to production, we'll use LetsEncrypt certs instead. 
letsencrypt_ssl_cert_path: /etc/letsencrypt/live/{{ site_fqdn }}/fullchain.pem
letsencrypt_ssl_key_path: /etc/letsencrypt/live/{{ site_fqdn }}/privkey.pem

########
# DEPLOY
########

# Parent directory for cloned repository directories. The clone_path and
# site_path should be children of this directory.
base_path: /opt

# Temporary location where the Git repo will be cloned and the build scripts
# will be run before going live.
temp_path: "{{ base_path }}/tmp"

# Where the production site symlink will exist.
site_path: "{{ base_path }}/piecewise_web"

########
# MAPPING CUSTOMIZATIONS
########
# Save the geofiles you intend to use for your Piecewise aggregations of
# M-Lab data in the folder: /local_customizations/geofiles/

# Then add the name of the shapefile file to be used below.
shape_file: CENSUS10_blkgrp_WGS.shp
topojson_file: seattle_census10_blockgroups.topojson

# The field name in your shape file which is a unique key
dbKey: geoid10
dbKeyDataType: string

# Additional details about your shapefile, used by ogr2ogr to import shapes into Postgres

# The SRS reprojection/transform to use for this shapefile
shape_projection: "EPSG:4326"
# The geometry type for this layer
geometry_type: MultiPolygon

# The layer name to be used for this shapefile in Postgres
layer_name: seattle_blkgrpce10

########
# AGGREGATION CUSTOMIZATIONS
########

aggregation_name: "by_census_block"
aggregation_stats_table_name: "block_statistics"

# Define the latitude and longitude for the southwest and northeast corners of a bounding 
# box, defining the region where you are interested in pulling M-Lab NDT data.
map_coordinate_southwest: 
  lat: "-122.6733398438"
  lon: "47.3630134401"

map_coordinate_northeast: 
  lat: "-121.9509887695"
  lon: "47.8076208172"

# The four variable below are derived from your bounding box coordinates above.
map_bounding_box: "{{ map_coordinate_southwest.lat }},{{ map_coordinate_southwest.lon }},{{ map_coordinate_northeast.lat }},{{ map_coordinate_northeast.lon }}"
map_center_lat: ({{ map_coordinate_southwest.lat }} + {{ map_coordinate_northeast.lat }})/2
map_center_lon: ({{ map_coordinate_southwest.lon }} + {{ map_coordinate_northeast.lon }})/2
map_center: "{{ map_center_lat }},{{ map_center_lon }}"

map_data_start_date: "Dec 1 2016 00:00:00"
map_data_end_date: "Jan 1 2017 00:00:00"
